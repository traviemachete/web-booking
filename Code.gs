/*  ===============================
    Google Apps¬†Script ‚Äë Back‚Äëend
    v2  (14¬†Jul¬†2025)
    ‚Ä¢¬†‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô FullCalendar (‡∏™‡πà‡∏á ISO‚Äëstring)
    ‚Ä¢¬†‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≥¬†+¬†‡πÇ‡∏¢‡∏ô error ‡∏Å‡∏•‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á UI
    ‚Ä¢¬†‡πÄ‡∏û‡∏¥‡πà‡∏° log¬†‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡πä‡∏Å¬†(testListEvents)
    =============================== */

/* ------------ CONST ------------ */
const SHEET_NAME = 'Sheet1';
const TZ = 'Asia/Bangkok';

/* -------------------------------------------------- */
/*  WEB‚ÄëAPP ENTRY                                     */
/* -------------------------------------------------- */
function doGet() {
  return HtmlService.createTemplateFromFile("Index")
    .evaluate()
    .setTitle("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°");
}
function include(name) {
  return HtmlService.createHtmlOutputFromFile(name).getContent();
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility ‡∏Å‡∏±‡∏ö frontend
function loginWithEmailPassword(email, password) {
  try {
    console.log('üîó LoginWithEmailPassword called with:', {
      email: email,
      passwordProvided: !!password
    });

    if (!email || !password) {
      throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    }

    return loginUser({
      email: email,
      pwd: password
    });

  } catch (err) {
    console.error('‚ùå LoginWithEmailPassword error:', err);
    throw new Error(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° debug function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö hash
function testHash() {
  const testPasswords = ['123456', '1234', 'test123'];

  testPasswords.forEach(pwd => {
    try {
      const hashed = hash(pwd);
      console.log(`Password "${pwd}" -> Hash: ${hashed.substring(0, 20)}...`);
    } catch (err) {
      console.error(`Hash failed for "${pwd}":`, err);
    }
  });
}

/* -------------------------------------------------- */
/*  CALENDAR¬†API  (‚Üí¬†FullCalendar)                    */
/* -------------------------------------------------- */
function listEvents() {
  const sh = SpreadsheetApp.getActive().getSheetByName(SHEET_NAME);
  const rows = sh.getDataRange().getValues();
  const events = [];

  for (let i = 1; i < rows.length; i++) {
    const r = rows[i];
    const [id, date, startT, endT, name, department, company, purpose, email, timestamp, status] =
      [r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10]];

    const startObj = mergeDateTime(date, startT);
    const endObj = mergeDateTime(date, endT);
    if (!startObj || !endObj) continue;            // skip broken rows

    const start = startObj.toISOString();          // ‚Üê¬†FullCalendar expects ISO string
    const end = endObj.toISOString();

    const stat = String(status || '').toLowerCase();
    const color = stat === 'cancelled' ? '#e57373' : '#81c784';

    events.push({
      id,
      title: `${(purpose || '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°').substring(0, 17)}`,
      start,
      end,
      backgroundColor: color,
      borderColor: color,
      extendedProps: {
        booker: name,
        department,
        company,
        purpose,
        email,
        timestamp: convertTimestamp(timestamp),
        status: status || ''
      }
    });
  }
  return events;               // usable by google.script.run
}

/* -------------------------------------------------- */
/*  BOOKING¬†API                                       */
/* -------------------------------------------------- */
function submitBooking(data) {
  const clash = isDuplicate(data.date, data.start, data.end);
  if (clash.dup) throw new Error(clash.msg);

  const sh = SpreadsheetApp.getActive().getSheetByName(SHEET_NAME);
  const id = sh.getLastRow();
  const now = Utilities.formatDate(new Date(), TZ, 'dd/MM/yyyy, HH:mm:ss');

  sh.appendRow([
    id,
    data.date,
    data.start,
    data.end,
    data.name,
    data.department,
    data.company,
    data.purpose,
    data.email,
    now,
    ''
  ]);
  return { status: 'ok' };
}

/* -------------------------------------------------- */
/*  DUPLICATE¬†CHECK                                   */
/* -------------------------------------------------- */
function isDuplicate(dateISO, tStart, tEnd) {
  const sh = SpreadsheetApp.getActive().getSheetByName(SHEET_NAME);
  const rows = sh.getDataRange().getValues().slice(1);

  const reqStart = new Date(`${dateISO}T${padTime(tStart)}:00`).getTime();
  const reqEnd = new Date(`${dateISO}T${padTime(tEnd)}:00`).getTime();

  for (const r of rows) {
    const [, d, st, et, booker] = r;
    if (!d || !st || !et) continue;

    const dISO = (d instanceof Date)
      ? Utilities.formatDate(d, TZ, 'yyyy-MM-dd')
      : (String(d).includes('-') ? d : Utilities.formatDate(parseDDMMYYYY(d), TZ, 'yyyy-MM-dd'));
    if (dISO !== dateISO) continue;

    const slotStart = new Date(`${dISO}T${padTime(st)}:00`).getTime();
    const slotEnd = new Date(`${dISO}T${padTime(et)}:00`).getTime();

    if (reqStart < slotEnd && reqEnd > slotStart) {
      return {
        dup: true,
        msg: `‡∏ä‡πà‡∏ß‡∏á ${padTime(tStart)}‚Äë${padTime(tEnd)} ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢ ‚Äú${booker}‚Äù\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•`
      };
    }
  }
  return { dup: false };
}
function padTime(t) {
  if (t instanceof Date) return t.toTimeString().slice(0, 5);
  if (typeof t === 'number') {
    const mins = Math.round(t * 1440); return `${String(Math.floor(mins / 60)).padStart(2, '0')}:${String(mins % 60).padStart(2, '0')}`;
  }
  const s = String(t).trim();
  if (s.includes(':')) {
    const [h, m = '00'] = s.split(':'); return `${h.padStart(2, '0')}:${m.padStart(2, '0')}`;
  }
  return `${s.padStart(2, '0')}:00`;
}

/* -------------------------------------------------- */
/*  DATE‚ÄëTIME HELPERS                                 */
/* -------------------------------------------------- */
function mergeDateTime(dateVal, timeVal) {
  if (!dateVal || !timeVal) return null;
  const dObj = (dateVal instanceof Date)
    ? new Date(dateVal)
    : (String(dateVal).includes('-') ? new Date(dateVal) : parseDDMMYYYY(dateVal));
  if (isNaN(dObj)) return null;
  const [h, m] = padTime(timeVal).split(':').map(Number);
  dObj.setHours(h, m, 0, 0);
  return dObj;                   //  ‚Üê ‡∏Ñ‡∏∑‡∏ô Date object (‡πÑ‡∏õ toISOString ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
}
function parseDDMMYYYY(s) {
  const [dd, mm, yy] = String(s).split('/');
  const yyyy = (+yy > 2500) ? +yy - 543 : +yy;
  return new Date(`${yyyy}-${mm}-${dd}`);
}
function convertTimestamp(ts) {
  if (!ts) return '';
  if (ts instanceof Date) return Utilities.formatDate(ts, TZ, "yyyy-MM-dd'T'HH:mm:ss");
  const [dPart, tPart = '00:00:00'] = String(ts).split(', ');
  const d = parseDDMMYYYY(dPart);
  if (isNaN(d)) return '';
  const [h = '00', m = '00', s = '00'] = tPart.split(':');
  d.setHours(+h, +m, +s);
  return Utilities.formatDate(d, TZ, "yyyy-MM-dd'T'HH:mm:ss");
}

/* ========== AUTH CONFIG ========== */
const USER_SHEET = 'Users';

/* ‡πÅ‡∏õ‡∏•‡∏á plain password ‚Üí hash (SHA-256 ‚Üí base64) */
function hash(pwd) {
  try {
    if (!pwd) {
      console.error('‚ùå Hash: Password is empty or null');
      return '';
    }

    const pwdStr = String(pwd);
    console.log('üîê Hashing password length:', pwdStr.length);

    const digest = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, pwdStr);
    const hashed = Utilities.base64Encode(digest);

    console.log('‚úÖ Hash generated successfully');
    return hashed;

  } catch (err) {
    console.error('‚ùå Hash error:', err);
    return '';
  }
}

/* ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å email */
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç findUser function - ‡πÄ‡∏û‡∏¥‡πà‡∏° safety checks
function findUser(email) {
  try {
    console.log('üîç Finding user for email:', email);

    if (!email) {
      console.log('‚ùå Email is empty');
      return null;
    }

    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Users');
    if (!sheet) {
      console.log('‚ùå Users sheet not found');
      return null;
    }

    const data = sheet.getDataRange().getValues();
    console.log('üìä Sheet data rows:', data.length);

    // ‡∏Ç‡πâ‡∏≤‡∏° header row (row 0)
    for (let i = 1; i < data.length; i++) {
      const row = data[i];

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ row ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
      if (!row || row.length < 8) {
        console.log(`‚ö†Ô∏è Row ${i} incomplete:`, row);
        continue;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email (column D = index 3)
      const userEmail = row[3];
      if (!userEmail) {
        console.log(`‚ö†Ô∏è Row ${i} has no email`);
        continue;
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ toLowerCase safely
      const emailStr = String(userEmail).toLowerCase().trim();
      const searchEmailStr = String(email).toLowerCase().trim();

      console.log(`üîç Comparing: "${emailStr}" vs "${searchEmailStr}"`);

      if (emailStr === searchEmailStr) {
        console.log('‚úÖ User found at row:', i + 1);

        return {
          row: i + 1,
          id: row[0] || '',        // A: id
          name: row[1] || '',      // B: name
          nickname: row[2] || '',  // C: nickname  
          email: row[3] || '',     // D: email
          hash: row[4] || '',      // E: password (hashed)
          phone: row[5] || '',     // F: phone
          role: row[6] || 'user',  // G: role
          created: row[7] || ''    // H: created_date
        };
      }
    }

    console.log('‚ùå User not found');
    return null;

  } catch (err) {
    console.error('‚ùå FindUser error:', err);
    return null;
  }
}


/* ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö */
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç loginUser function
function loginUser(obj) {
  try {
    console.log('üîç Login attempt starting...');
    console.log('üìß Email:', obj?.email);
    console.log('üîë Password provided:', !!obj?.pwd);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
    if (!obj || !obj.email || !obj.pwd) {
      console.log('‚ùå Invalid login data');
      throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    }

    // ‡∏´‡∏≤ user
    const user = findUser(obj.email);
    if (!user) {
      console.log('‚ùå User not found:', obj.email);
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    }

    console.log('üë§ User found:', user.name);
    console.log('üîê Stored hash length:', user.hash?.length || 0);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password
    if (!user.hash) {
      console.log('‚ùå User has no password hash');
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•');
    }

    const providedHash = hash(obj.pwd);
    if (!providedHash) {
      console.log('‚ùå Failed to hash provided password');
      throw new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
    }

    console.log('üîê Password hash comparison:', {
      provided: providedHash.substring(0, 10) + '...',
      stored: user.hash.substring(0, 10) + '...',
      match: user.hash === providedHash
    });

    if (user.hash !== providedHash) {
      console.log('‚ùå Password mismatch for:', obj.email);
      throw new Error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    // ‡πÄ‡∏Å‡πá‡∏ö session
    const prop = PropertiesService.getUserProperties();
    prop.setProperty('email', user.email);
    prop.setProperty('name', user.name);
    prop.setProperty('role', user.role);

    console.log('‚úÖ Login successful for:', obj.email);

    const result = {
      email: user.email,
      name: user.name,
      role: user.role
    };

    console.log('‚úÖ Returning user data:', result);
    return result;

  } catch (err) {
    console.error('‚ùå Login error:', err);
    throw new Error(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
  }
}

// REGISTER USER
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç registerUser function ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö sheet structure
function registerUser(data) {
  try {
    console.log('üìù Register attempt with data:', JSON.stringify(data, null, 2));

    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Users');
    if (!sheet) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Users sheet');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if (!data || !data.email || !data.password || !data.name) {
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡πÉ‡∏ä‡πâ findUser ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
    const existingUser = findUser(data.email);
    if (existingUser) {
      console.log('‚ùå Email already exists:', data.email);
      throw new Error(`‡∏≠‡∏µ‡πÄ‡∏°‡∏• ${data.email} ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô`);
    }

    // ‡∏´‡∏≤ ID ‡πÉ‡∏´‡∏°‡πà
    const lastRow = sheet.getLastRow();
    const newId = lastRow < 2 ? 1 : (sheet.getRange(lastRow, 1).getValue() || 0) + 1;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp
    const now = Utilities.formatDate(new Date(), TZ, 'd/M/yyyy, HH:mm:ss');

    // Hash password
    const hashedPassword = hash(data.password);
    if (!hashedPassword) {
      throw new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà - ‡∏ï‡∏≤‡∏° column order ‡πÉ‡∏ô sheet
    const newRow = [
      newId,                        // A: id
      data.name || '',             // B: name  
      data.nickname || '',         // C: nickname
      data.email,                  // D: email
      hashedPassword,              // E: password (hashed)
      data.phone || '',            // F: phone
      'user',                      // G: role
      now                          // H: created_date
    ];

    sheet.appendRow(newRow);

    console.log('‚úÖ User registered successfully:', {
      id: newId,
      email: data.email,
      name: data.name
    });

    return {
      status: 'success',
      message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      user: {
        id: newId,
        email: data.email,
        name: data.name
      }
    };

  } catch (err) {
    console.error('‚ùå Register error:', err);
    throw new Error(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
  }
}

/* ‡∏î‡∏∂‡∏á session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */
function getSessionUser() {
  const prop = PropertiesService.getUserProperties();
  const email = prop.getProperty('email');
  const name = prop.getProperty('name');
  const role = prop.getProperty('role');
  return email ? { email, name, role } : null;
}

/* ‡∏•‡∏ö session */
function logoutUser() {
  PropertiesService.getUserProperties().deleteAllProperties();
}

// ===== 4. ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö clean up duplicate emails =====
function cleanupDuplicateEmails() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Users');
    const data = sheet.getDataRange().getValues();

    const emails = new Set();
    const rowsToDelete = [];

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å row 2 (skip header)
    for (let i = 1; i < data.length; i++) {
      const email = data[i][3]; // Column D

      if (emails.has(email)) {
        rowsToDelete.push(i + 1); // Sheet rows are 1-indexed
      } else {
        emails.add(email);
      }
    }

    // ‡∏•‡∏ö rows ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô)
    rowsToDelete.reverse().forEach(rowNum => {
      sheet.deleteRow(rowNum);
      console.log('üóëÔ∏è Deleted duplicate row:', rowNum);
    });

    console.log(`‚úÖ Cleanup complete. Removed ${rowsToDelete.length} duplicate rows.`);
    return { removedRows: rowsToDelete.length };

  } catch (err) {
    console.error('‚ùå Cleanup error:', err);
    throw new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
}



/* ---------- DEV¬†TEST ---------- */
function testListEvents() {
  const ev = listEvents();
  Logger.log(`üëâ events=${ev.length}`);
  Logger.log(JSON.stringify(ev.slice(0, 3), null, 2));
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° debug function
function testRegister() {
  const testData = {
    name: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
    nickname: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    email: 'test@example.com',
    password: '123456',
    phone: '0812345678'
  };

  try {
    const result = registerUser(testData);
    console.log('‚úÖ Test register result:', result);
  } catch (err) {
    console.error('‚ùå Test register error:', err);
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° debug function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login
function testLogin() {
  try {
    const result = loginUser({
      email: 'test@example.com',
      pwd: '123456'
    });
    console.log('‚úÖ Test login result:', result);
  } catch (err) {
    console.error('‚ùå Test login error:', err);
  }
}

function testFindUser() {
  const testEmails = ['test@example.com', 'theerawat.it@waterpog.com'];

  testEmails.forEach(email => {
    try {
      const user = findUser(email);
      console.log(`Email "${email}" ->`, user ? `Found: ${user.name}` : 'Not found');
    } catch (err) {
      console.error(`FindUser failed for "${email}":`, err);
    }
  });
}

function debugSheet() {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Users');
    const data = sheet.getDataRange().getValues();

    console.log('üìä Sheet debug:');
    console.log('Total rows:', data.length);
    console.log('Headers:', data[0]);

    for (let i = 1; i < Math.min(data.length, 5); i++) {
      console.log(`Row ${i}:`, data[i]);
    }

  } catch (err) {
    console.error('‚ùå Sheet debug error:', err);
  }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö login ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
function testExistingLogin() {
  try {
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sheet
    const result = loginUser({
      email: 'test@example.com',
      pwd: '123456'  // password ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô register
    });
    console.log('‚úÖ Existing login test result:', result);
  } catch (err) {
    console.error('‚ùå Existing login test failed:', err);
  }
}

function testFrontendInput(email, password) {
  console.log('üß™ Testing frontend input:');
  console.log('Email:', email, '(type:', typeof email, ')');
  console.log('Password:', password, '(type:', typeof password, ')');
  console.log('Email empty?', !email);
  console.log('Password empty?', !password);

  if (!email || !password) {
    console.log('‚ùå Input validation failed');
    return { error: 'Invalid input' };
  }

  try {
    const result = loginUser({ email: email, pwd: password });
    console.log('‚úÖ Login test successful');
    return result;
  } catch (err) {
    console.log('‚ùå Login test failed:', err.message);
    return { error: err.message };
  }
}

function createTestUser() {
  const timestamp = new Date().getTime();
  const testUser = {
    name: '‡∏ú‡∏π‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
    nickname: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    email: `test${timestamp}@example.com`,
    password: '123456',
    phone: '0812345678'
  };

  try {
    const result = registerUser(testUser);
    console.log('‚úÖ Test user created:', result);
    return result;
  } catch (err) {
    console.error('‚ùå Test user creation failed:', err);
    return { error: err.message };
  }
}

function forgotPasswordWithNew(email, newPassword) {
  const sheet = SpreadsheetApp.getActive().getSheetByName('Users');
  const data = sheet.getDataRange().getValues();
  const emailCol = 4; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E
  const passCol = 3;  // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D

  for (let i = 1; i < data.length; i++) {
    if (data[i][emailCol - 1] === email) {
      const hash = Utilities.base64Encode(
        Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, newPassword)
      );
      sheet.getRange(i + 1, passCol).setValue(hash); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Hash
      return;
    }
  }

  throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
}
